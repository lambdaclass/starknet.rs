name: rust-tests

on:
  merge_group:
  push:
    branches: [ main ]
  pull_request:
    branches: [ '*' ]

env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: 1.72.1
  CAIRO_PROGRAMS_PATH: |
    cairo_programs/**/*.casm
    cairo_programs/**/*.sierra
    cairo_programs/**/*.json
    starknet_programs/**/*.casm
    starknet_programs/**/*.sierra
    starknet_programs/**/*.json
    !starknet_programs/raw_contract_classes/*
  CAIRO_2_VERSION_CACHE: 2.2.0

jobs:
  build:
    name: Build with release profile
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Python3 Build
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt, clippy
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true

    - name: Install deps
      run: make deps
    - name: Build
      run: make build

  lint:
    name: Lint with fmt and clippy
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt, clippy
    - name: Python3 Build
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    - name: Install deps
      run: make deps
    - name: Format
      run: cargo fmt --all -- --check
    - name: Run clippy
      run: cargo clippy --workspace --all-targets -- -D warnings

  tests:
    env:
      INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
      MLIR_SYS_170_PREFIX: /usr/lib/llvm-17/
      TABLEGEN_170_PREFIX: /usr/lib/llvm-17/
    strategy:
      fail-fast: false
      matrix:
        target: [ test-cairo-1, test-cairo-2, test-doctests, test-cairo-native ]
    name: Run tests
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: add llvm deb repository
      if: ${{ matrix.target == 'test-cairo-native' }}
      uses: myci-actions/add-deb-repo@10
      with:
        repo: deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main
        repo-name: llvm-repo
        keys-asc: https://apt.llvm.org/llvm-snapshot.gpg.key
    - name: Install LLVM
      if: ${{ matrix.target == 'test-cairo-native' }}
      run: sudo apt-get install -y llvm-17 llvm-17-dev llvm-17-runtime clang-17 clang-tools-17 lld-17 libpolly-17-dev libmlir-17-dev mlir-17-tools
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt, clippy
    - name: Python3 Build
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true

    - name: Install deps
      run: make deps

    - name: Install testing tools
      # TODO: remove `if` when nextest adds doctests support
      if: ${{ matrix.target != 'test-doctests' }}
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-nextest@0.9.49

    - name: Run tests (${{ matrix.target }})
      run: make ${{ matrix.target }}

  coverage:
    name: Generate and upload coverage report
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@nightly
      with:
        toolchain: ${{ env.RUST_TOOLCHAIN }}

    - name: Set nightly as default
      run: rustup default nightly

    - name: Install testing tools
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-nextest@0.9.49,cargo-llvm-cov

    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true

    - name: Cache coverage report
      id: restore-report
      uses: actions/cache/restore@v3
      with:
        path: lcov.info
        key: coverage-cache-${{ github.sha }}

    - name: Python3 Build
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    - uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true

    - name: Install deps
      run: make deps

    - name: Generate coverage report
      if: steps.restore-report.outputs.cache-hit != 'true'
      run: make coverage-report

    - name: Save coverage report
      if: steps.restore-report.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: lcov.info
        key: coverage-cache-${{ github.sha }}

    - name: Upload coverage to codecov.io
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
        files: lcov.info
